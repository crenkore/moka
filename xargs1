#!/usr/bin/env node
const child_process = require('child_process');

//初始化所需数据或数据结构
let line_num = 1;
let proc_num = 1;
let command = null;
let inputs = null;

//读取命令
for (let i = 2; i < process.argv.length; i++) {
    let a = process.argv[i];
    if (a.startsWith('-')) {
        let optarg = process.argv[++i];
        switch (a) {
            case '-n':
                if (isNaN(optarg) || optarg <= 0) { //TODO
                    console.error('xargs: illegal argument count');
                    process.exit(1);
                }
                line_num = parseInt(optarg);
                break;
            case '-P':
                proc_num = parseInt(optarg);
                if (isNaN(proc_num) || proc_num <= 0) {
                    console.error('xargs: max. processes must be >0');
                    process.exit(1);
                }
                break;
        }
    } else {
        command = a;
        while (++i) {
            if (i == process.argv.length) break;
            command += ` ${process.argv[i]}`;
        }
    }
}

//处理
let onceHandle = [];
process.stdin.on('data', (data) => {
    inputs = data.toString('utf8').split(/\s+/);
    inputs.filter(item=>item !== '').forEach(item=>onceHandle.push(item));
    if (process.argv.length <= 2) {
        process.stdout.write(data);
        process.exit(0);
    }
    if (onceHandle.length >= line_num) {
        handler(onceHandle);
        onceHandle = [];
    }
});

let handler = (inputArrs) => {
    let k = 0;
    let arr = [];
    let activeProcNum = 0;
    while (k < inputArrs.length) {
        let once_inputs = [];
        for (let j = k; j < k + line_num; j++) {
            let item = inputArrs[j];
            if ('' === item) break;
            once_inputs.push(item);
        }
        arr.push(once_inputs);
        k += line_num;
    }
    for (let ar of arr) {
        /*while (activeProcNum == proc_num) {
            if (activeProcNum != proc_num) break;
        }*/
        if (!ar.length) continue;
        if (proc_num == 1) {
            try {
                let res = child_process.execSync(`${command || 'echo '} ${ar.join(' ')}`);
                process.stdout.write(res);
            } catch (err) {
                process.exit(0);
            }
            continue;
        }
        let workerProcess = child_process.exec(`${command || 'echo '} ${ar.join(' ')}`, (error, stdout, stderr) => {
            if (error) {
                if (error.code == 127) {
                    console.error(`xargs: ${command}: No such file or directory`);
                } else {
                    process.stderr.write(stderr);
                }
                error.code != 1 && process.exit(error.code);
            }
            process.stdout.write(stdout);
        });
        workerProcess.on('close', (code) => {
            --activeProcNum;
        });
        ++activeProcNum;
    }
};
