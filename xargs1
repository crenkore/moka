#!/usr/bin/env node
const child_process = require('child_process');

//初始化所需数据或数据结构
let line_num = 1;
let proc_num = 1;
let command = null;
let inputs = null;

//读取命令
for (let i = 2; i < process.argv.length; i++) {
    let a = process.argv[i];
    if (a.startsWith('-')) {
        let optarg = process.argv[++i];
        switch (a) {
            case '-n':
                if (optarg < 1) { //TODO
                    console.error('invalid option argument');
                }
                line_num = parseInt(optarg);
                break;
            case '-P':
                proc_num = parseInt(optarg);
                break;
        }
    } else {
        command = a;
        while (++i) {
            if (i == process.argv.length) break;
            command += ` ${process.argv[i]}`;
        }
    }
}

//处理
let p = new Promise((resolve, reject) => {
    process.stdin.on('data', (data) => {
        inputs = data.toString('utf8').split(/\s+/);
    });
    process.stdin.on('end', () => {
        resolve(inputs);
    })
});

let handler = (inputArrs) => {
    let k = 0;
    while (k < inputArrs.length) {
        let once_inputs = [];
        for (let j = k; j < k + line_num; j++) {
            let item = inputArrs[j];
            if ('' === item) break;
            once_inputs.push(item);
        }
        if (once_inputs.length) {
            if (line_num > 1) {
                child_process.exec(`${command || 'echo '} ${once_inputs.join(' ')}`, (error, stdout, stderr) => {
                    process.stdout.write(stdout);
                });
            } else {
                process.stdout.write(child_process.execSync(`${command || 'echo '} ${once_inputs.join(' ')}`));
            }
        }
        k += line_num;
    }
};

p.then((inputArrs) => {
    handler(inputArrs);
});
